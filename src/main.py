# main.py
# This is the code for your Appwrite Cloud Function.

import asyncio
import json
from pycdn.server import CDNServer

# This is the main entry point for the Appwrite function.
# It needs to be async to handle the ASGI interface.
async def main(context):
    """
    An Appwrite function that acts as a PyCDN server.
    It serves the 'openai' package without needing a persistent server.
    """
    context.log("PyCDN Appwrite function triggered.")

    # 1. Initialize the PyCDN server in memory.
    #    The host and port are irrelevant as Appwrite handles networking.
    #    We explicitly allow the 'openai' package to be served.
    server = CDNServer(
        debug=True,
        allowed_packages=["openai"]
    )
    
    # Get the underlying FastAPI (ASGI) application from the CDNServer instance.
    app = server.app
    context.log(f"PyCDN server initialized for packages: {server.get_allowed_packages()}")

    # 2. Translate the Appwrite request (context.req) into an ASGI scope.
    #    This is the standard format web servers use to talk to Python web apps.
    scope = {
        "type": "http",
        "http_version": "1.1",
        "method": context.req.method,
        "path": context.req.path,
        "scheme": context.req.scheme,
        "query_string": context.req.query_string.encode(),
        "headers": [(k.lower().encode(), v.encode()) for k, v in context.req.headers.items()],
        "client": ("127.0.0.1", 8000), # Placeholder client info
        "server": (context.req.host, context.req.port),
    }

    # 3. Create async functions to handle the ASGI communication protocol.
    response_headers = []
    response_status = 200
    response_body = b''

    async def receive():
        # This function provides the request body to the application.
        return {"type": "http.request", "body": context.req.body_raw.encode(), "more_body": False}

    async def send(message):
        # This function captures the response generated by the application.
        nonlocal response_status, response_headers, response_body
        if message["type"] == "http.response.start":
            response_status = message["status"]
            response_headers = {k.decode(): v.decode() for k, v in message["headers"]}
        elif message["type"] == "http.response.body":
            response_body += message.get("body", b"")

    # 4. Execute the ASGI application with the prepared scope and handlers.
    #    This runs the complete request-response cycle for the PyCDN server in memory.
    context.log(f"Executing request: {scope['method']} {scope['path']}")
    await app(scope, receive, send)
    context.log(f"Request finished with status: {response_status}")

    # 5. Return the captured response using the Appwrite context.
    #    We use `binary()` to handle any content type correctly.
    return context.res.binary(
        response_body,
        response_status,
        response_headers
    )